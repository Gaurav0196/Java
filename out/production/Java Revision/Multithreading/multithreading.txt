Process--> Instance of a program that is being executed.When a program runs ,the operating system creates a
           process to manage its execution.

           Ex- When we open MS Word it becomes process in Operating system.

Thread--> A thread is the smallest unit of execution within  a process . A process can have  multiple threads,
          which share the same resources but can run independently.

          Ex- A web browser like Google Chrome might use multiple threads for different tabs,with each tab running
              as a separate thread.


MultiTasking --> Multitasking allows an operating system to run multiple processes simultaneously.
                 On single-core CPUs,this is done through time-sharing ,rapidly switching between tasks.
                 On multicore CPUs,true parallel execution occurs,with tasks distributed across cores.
                 The OS scheduler balances the load, ensuring efficient and responsive system performance.

                EX- We are browsing the internet while listening to music and downloading file.

                Multitasking utilizes the capabilities of a CPU and its cores .When an operating system
                performs multitasking,it can assign different tasks to different cores.This is more efficient
                than assigning all tasks to a single core.



Multithreading-->  refers to the ability to execute multiple threads within a single process concurrently.

                   ex- A web browser can use multithreading by having separate threads for rendering the page,
                       running javascript and manage user inputs. This makes the browser more responsive and
                       efficient.


                   Multithreading enhances the efficiency of multitasking by breaking down individual tasks
                   into smaller sub-tasks or threads. These threads can be processed simultaneously, making
                   better use of the CPU's capabilities.

                    In a Single-core system:
      Both threads and processes are managed by the OS scheduler through time slicing and context switching
      to create the illusion of simultaneous execution.


                    In a Multi-core system:
      both threads and process can run in true parallel on different cores,with OS scheduler distributing
      tasks across the cores to optimize performance.


Time Slicing:
Definition-> Time slicing divides CPU time into small intervals called time slices or quanta
Function->   The OS scheduler allocates these time slices to different processes and threads,ensuring
             each gets a fair share of CPU time.
 Purpose->   This prevents any single process or thread from monopolizing the CPU ,improving responsiveness
             and enabling concurrent execution.


 Context Switching:
 Definition-> Context switching is the process of saving the state of a currently running process or thread
              and loading the state of next one to be executed.

 Function-> When a process or thread's time slice expires,the OS scheduler performs a context switch to move
            the CPU's focus to another process or thread.

 Purpose->  This allows multiple processes and threads to share the CPU,giving the appearance of simultaneous
            execution on single-core CPUS or improving parallelism on multicore CPUs.


 Multitasking can be achieved through Multithreading where each task is divided into threads that
 are managed concurrently.


 While multitasking typically refers to running of multiple applications,multithreading is more granular
 dealing with multiple threads within the same application or process.

 Multitasking operates at the level of process  ,which are the operating system's primary unit of execution.


 Multithreading operates at the level of threads ,which are smaller units within a process.


 Multitasking involves managing resources between completely separate programs,which may have independent
 memory spaces and system resources.


 Multithreading involves managing resources within a single program ,where threads share the same
 memory and resources.

 Multitasking allows us to run multiple applications simultaneously,improving productivity and system utilization.

 Multithreading allows a single application to perform multiple tasks at same time,improving application
 performance and responsiveness.


 Java multithreading part of java.lang package

-> In  a single-core envt.,Java's multithreading is managed by JVM and the OS ,which switch between
   threads to give the illusion of concurrency.

   The threads share the single core ,and time-slicing is used to manage thread execution.


-> In mult-core envt., Java's multithreading can take full advantage of the available cores.
   The JVM can distribute thread across the multiple cores ,allowing true execution of threads.



--> When a java program starts ,one thread begins running immediately,which is called main thread. THis
    thread is responsible for executing the main method of a program.


--> To create a new thread in Java, you can either extend the Thread class or implement the Runnable
    interface within java.lang package

 --> Thread Pool--> Collection of pre initialized threads that are ready to perform a task

         why Thread Pool?

         1. Resource Management- Creating and destruction of thread
         2.  Response Time increase
         3.  Control over thread count










